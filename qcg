#!/usr/bin/env python
import sys
import getopt
import os
from string import Template

format_string = None
show_file = False
show_line = False
quiet = False
null_terminated = False
query_string = None
interpret_escapes = False

def unescape(str):
    slash = False
    ret = []

    for c in str:
        if slash:
            if c == '0': ret.append("\0")
            elif c == 'a': ret.append("\a")
            elif c == 'b': ret.append("\b")
            elif c == 't': ret.append("\t")
            elif c == 'n': ret.append("\n")
            elif c == 'v': ret.append("\v")
            elif c == 'f': ret.append("\f")
            elif c == 'r': ret.append("\r")
            elif c == '\\': ret.append("\\")
            slash = False
        elif c == '\\':
            slash = True
        else:
            ret.append(c)

    return "".join(ret)

def usage():
    print "%s [OPTIONS...] FILE QUERY" % sys.argv[0]
    print
    print "Options:"
    print "  -e QUERY  use QUERY as a callgraph query"
    print "  -f        print the filename for each match"
    print "  -n        print the filename and line number with output lines"
    print "  -q        suppress all normal output"
    print "  -z        a data line ends in 0 byte, not newline"
    print "  +FORMAT   format output lines using FORMAT"
    print "             %f, %l and %n are substituted with filename,\n"\
        + "             line number and symbol name.  %% is replaced\n"\
        + "             with single %."
    print "  -i        enable interpretation of backslash escapes in FORMAT"

try:
    optlist, args = getopt.gnu_getopt(sys.argv[1:], 'e:ifnqzZ', ["help"])
except getopt.GetoptError, e:
    print e
    sys.exit(1)

opts = dict(optlist)
if "--help" in opts:
    usage()
    sys.exit(0)
if "-e" in opts:
    query_string = opts["-e"]
if "-i" in opts:
    interpret_escapes = True
if "-f" in opts:
    show_file = True
if "-n" in opts:
    show_file = True
    show_line = True
if "-q" in opts:
    quiet = True
if "-Z" in opts or "-z" in opts:
    null_terminated = True

if query_string == None:
    try:
        query_string = args.pop()
    except IndexError:
        usage()
        sys.exit(1)

if format_string == None:
    for i, arg in enumerate(args):
        if arg.startswith("+"):
            format_string = args.pop(i)[1:]
            break
if format_string == None:
    format_string = ""
    format_string \
        = ("%f:" if show_file else "")\
        + ("%l:" if show_line else "")\
        + (" " if show_file or show_line else "")\
        + "%n"

class PercentTemplate(Template):
    delimiter = '%'

if interpret_escapes:
    format_string = unescape(format_string)
format_template = PercentTemplate(format_string)

# Don't support multiple files for now.
if len(args) != 1:
    usage()
    sys.exit(1)
cgfn = args[0]

for file in args:
    if not open(file):
        print "can't open %s" % file
        sys.exit(1)

import query
X = eval(query_string, query.__dict__, {"cg": query.CG(*args)})
del query

excode = 1
try:
    def gimmepath(p):
        p = os.path.normpath(p)
        if os.path.isabs(p):
            return p

        cgdir = os.path.dirname(cgfn)
        pdir = os.path.dirname(p)
        pbase = os.path.basename(p)
        path = os.path.normpath(cgdir + os.path.sep + pdir
                                + os.path.sep + pbase)
        path = os.path.abspath(path)
        cwd = os.getcwd()
        if not cwd.endswith(os.path.sep):
            cwd = cwd + os.path.sep
        if path.startswith(cwd):
            path = path[len(cwd):]
        return path

    for s in X:
        excode = 0
        if not quiet:
            # temporary workaround for paths in the query result
            if hasattr(s, "line") and hasattr(s, "name") and hasattr(s, "file"):
                out = format_template.substitute(l = str(s.line),
                                                 n = s.name,
                                                 f = gimmepath(s.file))
            else:
                out = s
            out = out + ("\0" if null_terminated else "\n")
            sys.stdout.write(out)
        else:
            break

except TypeError, e:
    print X
    excode = 0

sys.exit(excode)
